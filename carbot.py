from collections import defaultdict
import datetime
from rdkit import Chem, RDLogger
import time

from evolve import evol_single
from utils import *

class NodeDataset:
    def __init__(self):
        self.nodeinfo = defaultdict(dict)
        self.dftinfo = defaultdict(dict)
        self.dftcandidate = []
        self.generated_structures = set()
        self.structures_each_generation = []
        self.smi_index = []
        self.next_index = 0

class Transmuter:
    def __init__(self,original_structures,evolmethods=("connect","ethylene","acetylene"),is_EZ=True):
        
        print("---------- Generation #0 ----------")
        print("Structures\n"+",\n".join(original_structures)+"\nare loaded as the original structures.")
        self.node_data = NodeDataset()
        self.num_generation = 0
        self.log = []
        self.evolmethods = evolmethods
        self.is_EZ = is_EZ

        self.node_data.structures_each_generation.append([])
        
        # store information (key: canonical SMILES)
        # label "index": index (unique)
        # label "evolmethod": method to be used to generate the molecule
        # label "numconnect": number of connection

        for smi in original_structures:
            self.node_data.nodeinfo[smi]["index"] = self.node_data.next_index
            self.node_data.nodeinfo[smi]["generation"] = self.num_generation
            mol = Chem.MolFromSmiles(smi)
            rinfo = mol.GetRingInfo()
            self.node_data.nodeinfo[smi]["numconnect"] = rinfo.NumRings()
            self.node_data.nodeinfo[smi]["benzene"] = False
            self.node_data.dftcandidate.append(smi)
            self.node_data.generated_structures.add(smi)
            self.node_data.structures_each_generation[-1].append(smi)
            self.node_data.smi_index.append(smi)
            self.node_data.next_index += 1
        
        self.log.append([])
        self.log[-1].append((len(self.node_data.structures_each_generation[-1]),defaultdict(int)))
    
    def evolve_single(self):
        time_0 = time.time()
        num_mother_generation = len(self.node_data.structures_each_generation[-1])
        announce_num = 100
        targeted_cnt = set([(i+1)*num_mother_generation//announce_num for i in range(announce_num)])
        self.num_generation += 1
        print("---------- Generation #"+str(self.num_generation)+" ----------")  
        self.node_data.structures_each_generation.append([])
        num_each_method = defaultdict(int)
        phenyl_cnt = 0
        for i, smi in enumerate(self.node_data.structures_each_generation[-2]):
            if i in targeted_cnt:
                print(f'{i*100.0/num_mother_generation:.0f}% of generation has been finised. Elapsed time: {datetime.timedelta(seconds=time.time()-time_0)}')
            for gen_smi, gen_detail in evol_single(smi,self.evolmethods,self.is_EZ):
                if not (gen_smi in self.node_data.generated_structures):
                    self.node_data.nodeinfo[gen_smi]["index"] = self.node_data.next_index
                    self.node_data.nodeinfo[gen_smi]["generation"] = self.num_generation
                    if not gen_smi in self.node_data.structures_each_generation[-1]:
                        self.node_data.structures_each_generation[-1].append(gen_smi)
                    if gen_detail[1] in ("connect","annulate_pl2","annulate_pl4","phenyl"):
                        self.node_data.nodeinfo[gen_smi]["numconnect"] =  self.node_data.nodeinfo[smi]["numconnect"] + 1
                    else:
                        self.node_data.nodeinfo[gen_smi]["numconnect"] =  self.node_data.nodeinfo[smi]["numconnect"]
                    self.node_data.generated_structures.add(gen_smi)
                    self.node_data.smi_index.append(gen_smi)
                    self.node_data.next_index += 1
                    if self.node_data.nodeinfo[smi]["benzene"] or (gen_detail[1] in ("annulate_pl2","annulate_pl4","phenyl")) or (gen_detail[1] == "connect" and is_benzene_constructed(smi,[gen_detail[2],gen_detail[3]])):
                        self.node_data.nodeinfo[gen_smi]["benzene"] = True
                        phenyl_cnt += 1
                    else:
                        self.node_data.nodeinfo[gen_smi]["benzene"] = False                      
        print(f"phenyl_cnt: {phenyl_cnt}")
        print(f"total-time: {time.time()-time_0}")
        self.log.append([])
        print("[summary] Total structures in generation #"+str(self.num_generation)+": "+str(len(self.node_data.structures_each_generation[self.num_generation])))
        for method_name, val in num_each_method.items():
            print("   #"+str(val)+" structures generated by ["+method_name+"]")
        self.log[-1].append((len(self.node_data.structures_each_generation[self.num_generation]),num_each_method,phenyl_cnt))
    

if __name__ == '__main__':
    RDLogger.DisableLog('rdApp.*')
    # original_strucutres as list of SMILES
    original_structures = ["[H][H]"]

    tmt = Transmuter(original_structures,evolmethods=("connect","ethylene","acetylene","annulate_pl2","annulate_pl4","phenyl"))


    from generation import save_tmt_data_comp
    save_tmt_data_comp(tmt,1)




    


